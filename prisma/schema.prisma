// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Profile       Profile?
    sellerProfile SellerProfile?
    role          Role           @default(User)
    password      String?
}

enum Role {
    Admin
    User
    Seller
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id               String            @id @default(cuid())
    userId           String            @unique
    cart             Cart[]
    OrderProducts    OrderedProducts[]
    shipping_address String
    user             User              @relation(fields: [userId], references: [id])
}

model SellerProfile {
    sellerProfileId String            @id
    user            User              @relation(fields: [sellerProfileId], references: [id])
    Products        Products[]
    OrderedProducts OrderedProducts[]
}

model Cart {
    id        String   @id @default(cuid())
    productId String
    quantity  Int
    buyerId   String?
    Profile   Profile? @relation(fields: [buyerId], references: [userId])
    createdAt DateTime @default(now())
}

model Products {
    id                 String         @id @default(cuid())
    sellerId           String
    productName        String
    productDescription String
    coverImage         String
    stock              Int
    Images             Images[]
    price              Int
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @default(now())
    createdBy          SellerProfile? @relation(fields: [sellerId], references: [sellerProfileId])
    sizes              SizeModal[]
}

model Images {
    id        String   @id @default(cuid())
    image     Json
    productId String
    product   Products @relation(fields: [productId], references: [id])
}

enum Size {
    xs
    sm
    md
    lg
    xl
}

model SizeModal {
    id        String   @id @default(cuid())
    size      Size
    stock     Int
    colors    Json
    productId String
    product   Products @relation(fields: [productId], references: [id])
}

model OrderedProducts {
    orderId       String        @id @default(cuid())
    userId        String
    sellerId      String
    orderAt       DateTime      @default(now())
    productId     String
    price         Int
    quantity      Int
    delivaryDate  DateTime
    status        String
    paymentMethod String
    orderBy       Profile       @relation(fields: [userId], references: [userId])
    sellBy        SellerProfile @relation(fields: [sellerId], references: [sellerProfileId])
}
